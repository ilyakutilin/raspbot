import time
from abc import ABC, abstractmethod

from raspbot.db.models import PointTypeEnum
from raspbot.db.routes.schema import PointResponse, ThreadResponse
from raspbot.services.shorteners.short_point import get_short_point_type
from raspbot.services.split import split_string_list
from raspbot.settings import settings

# START

GREETING_NEW_USER = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! ‚úã\n\n–í—ã —Ä–∞–Ω—å—à–µ —É –Ω–∞—Å –Ω–µ –±—ã–ª–∏, –ø–æ—ç—Ç–æ–º—É –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ "
    "—Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ <b>/search</b> –∏ —Å–ª–µ–¥—É–π—Ç–µ "
    "—É–∫–∞–∑–∞–Ω–∏—è–º."
)
GREETING_EXISTING_USER = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! ‚úã\n\n<b>/search</b> - –ù–æ–≤—ã–π –ø–æ–∏—Å–∫\n"
    "<b>/recent</b> - –í–∞—à–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã\n<b>/fav</b> - –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
)


# ROUTES


class SinglePointFound:
    """Message displayed when a single point was found while searching."""

    def __init__(self, point: PointResponse, is_departure: bool):
        """Initializes the SinglePointFound class instance."""
        self.is_departure: bool = is_departure
        self.point_type: PointTypeEnum = point.point_type
        self.title: str = point.title
        self.region_title: str = point.region_title

    def __str__(self):
        """Returns the string representation of the class instance."""
        dep_or_dest = "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è" if self.is_departure else "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
        type_ = get_short_point_type(self.point_type)
        title = self.title
        region = self.region_title
        return f"–ü—É–Ω–∫—Ç {dep_or_dest} - {type_} {title}, {region}."


INPUT_DEPARTURE_POINT = "–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏—é):"
INPUT_TOO_SHORT = "–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞."
POINT_NOT_FOUND = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É."
MISSING_POINT = (
    "–ñ–∞–ª—å, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å üò¢\n"
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É."
)
WHAT_YOU_WERE_LOOKING_FOR = "–≠—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏?"
MULTIPLE_POINTS_FOUND = (
    "–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç (–≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏—é) –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å. "
    '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–µ—Ç –º–æ–µ–≥–æ –ø—É–Ω–∫—Ç–∞"'
)
MORE_POINT_CHOICES = "–í–æ—Ç –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
INPUT_DESTINATION_POINT = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏—é):"


# TIMETABLE

CLOSEST_DEPARTURES = "–í–æ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É {route}."
TODAY_DEPARTURES = (
    "–í–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É {route} —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è."
)
DATE_DEPARTURES = "–í–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É {route} –Ω–∞ {date}."
ROUTE_IN_BRACKETS = (
    "–í —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω –º–∞—Ä—à—Ä—É—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ "
    "(–µ–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç) –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
)
DEPARTURE_STATION_IN_BRACKETS = (
    "–í —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
)
DESTINATION_STATION_IN_BRACKETS = (
    "–í —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."
)
STATIONS_IN_BRACKETS = (
    "–í —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."
)
NO_TODAY_DEPARTURES = (
    "–°–µ–≥–æ–¥–Ω—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É {route} –Ω–µ –±—É–¥–µ—Ç üòï\n\n"
    '–ú–æ–∂–Ω–æ –ø–æ–∏—Å–∫–∞—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≤—Ç—Ä–∞" –ø–æ–¥ —ç—Ç–∏–º '
    "—Å–æ–æ–±—â–µ–Ω–∏–µ–º."
)
PRESS_DEPARTURE_BUTTON = (
    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, "
    "—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
)
PRESS_DEPARTURE_BUTTON_OR_TYPE = (
    "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º "
    "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –í –∫–Ω–æ–ø–∫–∏ –≤—ã–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. "
    "–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ —Ä–µ–π—Å—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º "
    "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n05:25 –∏–ª–∏ 5.25 –∏–ª–∏ 525"
)
TYPE_DEPARTURE = (
    "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º "
    "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n05:25 –∏–ª–∏ 5.25 –∏–ª–∏ 525"
)
SAME_DEPARTURE = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π —Ä–µ–π—Å"
CONT_NEXT_MSG = "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
TYPE_ARBITRARY_DATE = (
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–µ–ª–∞–µ–º–æ–π –¥–∞—Ç–æ–π.\n\n"
    "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
    '"<b>–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞</b>"\n"<b>—Å—É–±–±–æ—Ç–∞</b>" –∏–ª–∏ "<b>—Å–±</b>"\n'
    '"<b>25</b>" (—á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞, –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ, –µ—Å–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ '
    "—Ç–∞–∫–æ–µ —á–∏—Å–ª–æ —É–∂–µ –±—ã–ª–æ)\n"
    '"<b>25.04.2024</b>" –∏–ª–∏ "<b>25.4.24</b>" –∏–ª–∏ "<b>25.4</b>"'
)
ERROR = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è."


class FormattedThreadList(ABC):
    """Base abstract class for formatting a list of threads."""

    def __init__(
        self,
        thread_list: list[ThreadResponse],
        max_length: int = settings.MAX_TG_MSG_LENGTH,
    ):
        """Initializes the FormattedThreadList class instance."""
        self.thread_list = thread_list
        self.max_length = max_length

    def __len__(self):
        """Returns the length of the list which is the number of timetable threads."""
        return len(self.thread_list)

    def _split_threads(self, basic_msg: str, threads: list[str]) -> tuple[str]:
        split_at = self.max_length - len(basic_msg)
        split_thread_lists: list[list[str]] = split_string_list(
            string_list=threads, limit=split_at
        )
        for tl in split_thread_lists:
            split_thread_lists[split_thread_lists.index(tl)] = "\n".join(
                dep for dep in tl
            )
        return tuple(split_thread_lists)

    @abstractmethod
    def station_to_settlement(self) -> str:
        """Abstract method for the station-to-settlement case."""
        raise NotImplementedError("Please implement station_to_settlement.")

    @abstractmethod
    def settlement_to_station(self) -> str:
        """Abstract method for the settlement_to_station case."""
        raise NotImplementedError("Please implement settlement_to_station.")


class FormattedUnifiedThreadList(FormattedThreadList):
    """Class for formatting threads with the same departure and the same destination."""

    @property
    def _simple_threads(self) -> str:
        return "\n".join([dep.message_with_route for dep in self.thread_list])

    def station_to_settlement(self) -> str:
        """Returns the formatted message(s) for the station-to-settlement case.

        Departure point is a station, but the destination point is a settlement,
        thus a destination station shall be clearly defined in a message.

        The message is split into multiple ones if they are too long.
        The return format is a tuple. If a message length is below the max limit
        of the Telegram API, then the tuple contains a single string.
        """
        return self._split_threads(
            basic_msg=(
                f"–í—Å–µ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ –ø—Ä–∏–±—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é {self.thread_list[0].to}."
                f"\n{ROUTE_IN_BRACKETS}\n\n"
            ),
            threads=self._simple_threads,
        )

    def settlement_to_station(self) -> str:
        """Returns the formatted message(s) for the settlement_to_station case.

        Departure point is a settlement, but the destination point is a station,
        thus a departure station shall be clearly defined in a message.

        The message is split into multiple ones if they are too long.
        The return format is a tuple. If a message length is below the max limit
        of the Telegram API, then the tuple contains a single string.
        """
        return self._split_threads(
            basic_msg=(
                f"–í—Å–µ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {self.thread_list[0].from_}."
                f"\n{ROUTE_IN_BRACKETS}\n\n"
            ),
            threads=self._simple_threads,
        )

    def settlement_to_settlement(self) -> str:
        """Returns the formatted message(s) for the settlement_to_settlement case.

        Both the departure and the destination points are settlements, thus both the
        departure and the destination stations shall be clearly defined in a message.

        The message is split into multiple ones if they are too long.
        The return format is a tuple. If a message length is below the max limit
        of the Telegram API, then the tuple contains a single string.
        """
        return self._split_threads(
            basic_msg=(
                f"–í—Å–µ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {self.thread_list[0].from_} "
                f"–∏ –ø—Ä–∏–±—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é {self.thread_list[0].to}."
                f"\n{ROUTE_IN_BRACKETS}\n\n"
            ),
            threads=self._simple_threads,
        )


class FormattedDifferentThreadList(FormattedThreadList):
    """Class for formatting threads with different departures and/or destinations."""

    @property
    def _different_destination_stations(self) -> str:
        return (
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ –ø—Ä–∏–±—ã–≤–∞—é—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏!\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è.\n\n"
        )

    @property
    def _different_departure_stations(self) -> str:
        return (
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π!\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        )

    @property
    def _same_dep_diff_dest_stations(self) -> str:
        return (
            f"–í—Å–µ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {self.thread_list[0].from_}.\n"
            "‚ö†Ô∏è –û–¥–Ω–∞–∫–æ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏–±—ã—Ç–∏—è —É –≤—Å–µ—Ö —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ "
            "—Ä–∞–∑–Ω—ã–µ!\n–û–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n\n"
        )

    @property
    def _diff_dep_same_dest_stations(self) -> str:
        return (
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —É –≤—Å–µ—Ö —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
            "–û–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n"
            f"–°—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è –≤—Å–µ—Ö —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ - {self.thread_list[0].to}.\n\n"
        )

    @property
    def _diff_dep_diff_dest_stations(self) -> str:
        return (
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —É –≤—Å–µ—Ö —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è "
            "–∏ –ø—Ä–∏–±—ã—Ç–∏—è!\n–û–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –∫–∞–∂–¥—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n\n"
        )

    def station_to_settlement(self) -> tuple[str]:
        """Returns the formatted message(s) for the station-to-settlement case.

        The message is split into multiple ones if they are too long.
        The return format is a tuple. If a message length is below the max limit
        of the Telegram API, then the tuple contains a single string.
        """
        return self._split_threads(
            basic_msg=self._different_destination_stations,
            threads=[dep.message_with_destination_station for dep in self.thread_list],
        )

    def settlement_to_station(self) -> tuple[str]:
        """Returns the formatted message(s) for the settlement_to_station case.

        The message is split into multiple ones if they are too long.
        The return format is a tuple. If a message length is below the max limit
        of the Telegram API, then the tuple contains a single string.
        """
        return self._split_threads(
            basic_msg=self._different_departure_stations,
            threads=[dep.message_with_departure_station for dep in self.thread_list],
        )

    def settlement_one_to_settlement_diff(self) -> tuple[str]:
        """Returns the formatted message(s) for settlement_one_to_settlement_diff case.

        The same departure station within a given settlement, but different
        destination stations.

        The message is split into multiple ones if they are too long.
        The return format is a tuple. If a message length is below the max limit
        of the Telegram API, then the tuple contains a single string.
        """
        return self._split_threads(
            basic_msg=self._same_dep_diff_dest_stations,
            threads=[dep.message_with_destination_station for dep in self.thread_list],
        )

    def settlement_diff_to_settlement_one(self) -> tuple[str]:
        """Returns the formatted message(s) for settlement_diff_to_settlement_one case.

        Different departure stations within a given settlement, but the same
        destination station.

        The message is split into multiple ones if they are too long.
        The return format is a tuple. If a message length is below the max limit
        of the Telegram API, then the tuple contains a single string.
        """
        return self._split_threads(
            basic_msg=self._diff_dep_same_dest_stations,
            threads=[dep.message_with_departure_station for dep in self.thread_list],
        )

    def settlement_diff_to_settlement_diff(self) -> tuple[str]:
        """Returns the formatted message(s) for settlement_diff_to_settlement_diff case.

        Different departure stations within a given settlement, as well as different
        destination stations.

        The message is split into multiple ones if they are too long.
        The return format is a tuple. If a message length is below the max limit
        of the Telegram API, then the tuple contains a single string.
        """
        return self._split_threads(
            basic_msg=self._diff_dep_diff_dest_stations,
            threads=[
                dep.message_with_departure_and_destination for dep in self.thread_list
            ],
        )


class ThreadInfo:
    """Information about a particular timetable thread."""

    def __init__(self, thread: ThreadResponse):
        """Initialize the ThreadInfo class instance."""
        self.thread = thread

    def __str__(self):
        """Returns the string representation of the class instance."""
        express = ", " + self.thread.express_type if self.thread.express_type else ""
        dep_platform = (
            ", " + self.thread.departure_platform
            if self.thread.departure_platform
            else ""
        )
        dep_terminal = (
            ", " + self.thread.departure_terminal
            if self.thread.departure_terminal
            else ""
        )
        dest_platform = (
            ", " + self.thread.arrival_platform if self.thread.arrival_platform else ""
        )
        dest_terminal = (
            ", " + self.thread.arrival_terminal if self.thread.arrival_terminal else ""
        )
        duration = time.strftime("%H —á. %M –º–∏–Ω.", time.gmtime(self.thread.duration))
        return (
            f"<b>‚Ññ –ø–æ–µ–∑–¥–∞:</b> {self.thread.number}\n"
            f"<b>–¢–∏–ø –ø–æ–µ–∑–¥–∞:</b> {self.thread.transport_subtype}{express}\n"
            f"<b>–ú–∞—Ä—à—Ä—É—Ç –ø–æ–µ–∑–¥–∞:</b> {self.thread.title}\n"
            f"<b>–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫:</b> {self.thread.carrier}\n"
            f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç. {self.thread.from_}:</b> "
            f"{self.thread.str_time}{dep_platform}{dep_terminal}\n"
            f"<b>–ü—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ —Å—Ç. {self.thread.to}:</b> "
            f"{self.thread.arrival.strftime(settings.DEP_FORMAT)}"
            f"{dest_platform}{dest_terminal}\n"
            f"<b>–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è:</b> {self.thread.stops}\n"
            f"<b>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</b> {duration}\n"
            # TODO: Ticket prices
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞:</b> {self.thread.ticket_price} —Ä—É–±.\n"
        )


# USERS

NO_RECENT = (
    "–í—ã –µ—â–µ –Ω–µ –∏—Å–∫–∞–ª–∏ —Ä–∞–ø–∏—Å–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—É—Å—Ç ü§∑‚Äç‚ôÇÔ∏è\n\n"
    "–ù–∞–∂–º–∏—Ç–µ <b>/search</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫\nüöÉüöÉüöÉüöÉüöÉüöÉ"
)
NO_FAV_NO_RECENT = (
    "–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ü§∑‚Äç‚ôÇÔ∏è\n\n"
    "–ù–∞–∂–º–∏—Ç–µ <b>/search</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫\nüöÉüöÉüöÉüöÉüöÉüöÉ\n"
    "–ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –≤–Ω–∏–∑—É –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "
    "–µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è"
)
NO_FAV_YES_RECENT = (
    "–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ü§∑‚Äç‚ôÇÔ∏è\n\n"
    "–ù–æ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –∏—Å–∫–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üïë\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, "
    '–∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤—Å–µ —Å—Ä–∞–∑—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ".\n\n'
    "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ <b>/search</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫\nüöÉüöÉüöÉüöÉüöÉüöÉ"
    "–ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –≤–Ω–∏–∑—É –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "
    "–µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è"
)
RECENT_LIST = (
    "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–∫–∞–ª–∏. "
    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
)
FAV_LIST = (
    "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. "
    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
)
ROUTE_ADDED_TO_FAV = "–ú–∞—Ä—à—Ä—É—Ç {route} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ üëç"


class MultipleToFav:
    """Class for multiple routes to be added to the favourite list."""

    def __init__(self, amount: int):
        """Initializes the MultipleToFav class instance."""
        self.amount: int = amount

    def _words_with_endings(self):
        x = str(self.amount)
        if x == "1" or self.amount > 20 and x[-1] == "1":
            return f"{x} –º–∞—Ä—à—Ä—É—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω"
        if x[-1] in ["2", "3", "4"]:
            return f"{x} –º–∞—Ä—à—Ä—É—Ç–∞ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
        return f"{x} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ"

    def __str__(self):
        """Returns the string representation of the class instance."""
        return f"{self._words_with_endings()} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ üëç"


# ERRORS

TIME_INPUT_TOO_SHORT = (
    "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.\n"
    "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã —Ç—Ä–∏ —Ü–∏—Ñ—Ä—ã - –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –¥–ª—è —á–∞—Å–æ–≤, –∏ –¥–≤–µ –¥–ª—è –º–∏–Ω—É—Ç. –ú–µ–∂–¥—É "
    "—á–∞—Å–∞–º–∏ –∏ –º–∏–Ω—É—Ç–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–π –∑–Ω–∞–∫ –∏–ª–∏ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞–∫–æ–≤ "
    "–≤–æ–æ–±—â–µ, –Ω–æ —Ç—Ä–∏ —Ü–∏—Ñ—Ä—ã –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å üôÇ"
)

TIME_INPUT_TOO_LONG = (
    "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.\n"
    "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º —á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã - –¥–≤–µ –¥–ª—è —á–∞—Å–æ–≤ –∏ –¥–≤–µ –¥–ª—è –º–∏–Ω—É—Ç. –ú–µ–∂–¥—É "
    "—á–∞—Å–∞–º–∏ –∏ –º–∏–Ω—É—Ç–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–π –∑–Ω–∞–∫ –∏–ª–∏ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞–∫–æ–≤ "
    "–≤–æ–æ–±—â–µ, –Ω–æ –±–æ–ª—å—à–µ —á–µ—Ç—ã—Ä–µ—Ö —Ü–∏—Ñ—Ä –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ üôÇ"
)

TIME_INPUT_NOT_RECOGNIZED = (
    "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.\n"
    "–í–æ—Ç –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: 1525. –¢–∞–∫ –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ 15 - —ç—Ç–æ —á–∞—Å—ã, "
    "–∞ 25 - —ç—Ç–æ –º–∏–Ω—É—Ç—ã."
)

TIME_NOT_FOUND = (
    "–í—ã –∏—Å–∫–∞–ª–∏ {time}, –Ω–æ —Ç–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç üòï\n"
    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –≥–¥–µ-—Ç–æ –∑–∞–∫—Ä–∞–ª–∞—Å—å –æ–ø–µ—á–∞—Ç–∫–∞ üëÄ"
)
